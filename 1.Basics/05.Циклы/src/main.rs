// Циклы предназначены для повторения определенного действия,
// до тех пор пока верно условие его инициализации.
// Для такой задачи Rust предоставляет несколько разновидностей циклов.
// Виды циклов: loop, while и for. Рассмотрим каждый в отдельности.

fn main() {
    // Ключевое слово loop подразумевает бесконечный цикл.
    // Можно поместить ключевое слово break внутрь цикла,
    // чтобы сообщить программе когда необходимо прервать выполнение цикла

    // loop{
    //     println!("new!")
    // }

    // Из цикла loop можно вернуть значение. 
    // для этого нужно добавить значение,
    // которое вы хотите вернуть после выражения break
    let mut counter = 0;

    let result = loop {
        counter += 1; // Каждое повторение увеличивает значение counter

        if counter == 10 {
            // проверяем если = 10
            break counter + 100; // добавляем еще +100 и прерываем цикл
        }
    };
    println!("counter = {}", result);


    // Цикл while
    // while сразу проверяет истинность условия,
    // если условие истинно, то код цикла выполняется
    // пока условие остается истинным

    while counter != 0 {
        println!("{}!", counter);
        // при каждом проходе отнимаем 1
        counter -= 1; // counter = counter -1
    }


    // Цикл for
    // for выполняет действие для каждого элемента из набора данных.
    // Безопасность и краткость цикла for делает его наиболее используемой конструкцией циклов
    let a = [10, 20, 30, 40, 50];

    for element in a.iter() {
        println!("the value is: {}", element);
    }

    // Вот так может выглядеть обратный отсчёт используя цикл for и метод rev для реверса диапазона:
    for number in (1..4).rev() {
        println!("{}!", number);
    }

}
