#![allow(non_snake_case)]
#![allow(unused_variables)]

fn main() {
    // Большинство программ на Rust используют связывание имён.
    // Связывание аналогично присвоению в других языках и связывает значение с именем.
    // Для связывания используется команда let:
    let a = 5;

    // Особенности связывания.
    // В левой части выражения let располагается не просто имя переменной, а шаблон.
    // что позволяет сделать так:
    let (x, y) = (1, 2); // x = 1, y = 2

    // Rust — статически типизированный язык это означает  что мы должны указывать типы переменных.
    // Также Rust может самостоятельно определить тип переменной, в таком случае указание не требуется.
    // Тип указывается после двоеточия.
    let i: i32 = 5; //x 32-битное число
    println!("i = {}", i);
    // Связывание неизменяемо!
    // i = 10; // вызовет ошибку
    // Повторное связывание изменяет значение
    let i: i32 = 100;
    println!("i = {}", i);

    // Чтобы связывание было изменяемым используется модификатор mut:
    let mut i_mut = 1;
    println!("i_mut = {}", i_mut);
    i_mut = 500;
    println!("i_mut = {}", i_mut);

    // Область видимости
    // Связанные имена имеют область видимости и ограничены блоком в котором были объявлены.
    // Блок — это совокупность операторов, заключённая в фигурных скобках { и }
    let x: i32 = 10;
    {
        println!("{}", x); // 10
        let x = 20;
        println!("{}", x); // 20
    }
    println!("{}", x); // 10


    let y = 55;
    println!("y = {}", y); // y - число
    let y = "Текст"; // теперь Y это строка
    println!("y = {}", y);

    // Числовой разделитель
    let sep_num = 25_000_555; // = 25000555
    let sep_num2 = 10_000_555;
    println!("{}+{}={}", sep_num, sep_num2, (sep_num + sep_num2));
}
